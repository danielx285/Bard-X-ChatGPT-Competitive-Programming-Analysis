class Solution {
public:
    int minProcessingTime(vector<int>& processorTime, vector<int>& tasks) {
        // Sort the processors in ascending order of their availability time.
        sort(processorTime.begin(), processorTime.end());

        // Create a priority queue to store the tasks in decreasing order of their execution time.
        priority_queue<int> pq;
        for (int task : tasks) {
            pq.push(task);
        }

        // Initialize the minimum processing time.
        int minProcessingTime = 0;

        // Assign the tasks to the processors in a greedy manner.
        for (int i = 0; i < processorTime.size(); i++) {
            int nextTask = pq.top();
            pq.pop();

            // Update the minimum processing time.
            minProcessingTime = max(minProcessingTime, processorTime[i] + nextTask);
        }

        return minProcessingTime;
    }
};
