class Solution {
public:
    int minProcessingTime(vector<int>& processorTime, vector<int>& tasks) {
        // Sort the processors in ascending order of their availability time.
        sort(processorTime.begin(), processorTime.end());

        // Create a priority queue to store the tasks in descending order of their execution time.
        priority_queue<int> pq(tasks.begin(), tasks.end(), greater<int>());

        // Initialize the minimum processing time.
        int minProcessingTime = 0;

        // Iterate over the processors.
        for (int i = 0; i < processorTime.size(); i++) {
            // Get the next task to be executed.
            int task = pq.top();
            pq.pop();

            // Update the minimum processing time.
            minProcessingTime = max(minProcessingTime, processorTime[i] + task);
        }

        return minProcessingTime;
    }
};
