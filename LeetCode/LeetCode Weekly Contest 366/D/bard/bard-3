#include <vector>

using namespace std;

class Solution {
public:
    int maxSum(vector<int>& nums, int k) {
        // Sort the array in decreasing order.
        sort(nums.begin(), nums.end(), greater<int>());

        // Create a prefix sum array.
        vector<int> prefixSum(nums.size() + 1, 0);
        for (int i = 1; i <= nums.size(); i++) {
            prefixSum[i] = prefixSum[i - 1] + nums[i - 1];
        }

        // Initialize the maximum sum.
        int maxSum = 0;

        // Iterate over the array and choose k elements.
        for (int i = 0; i < k; i++) {
            // Calculate the sum of the squares of the chosen elements.
            int sum = nums[i] * nums[i];

            // If we have chosen at least two elements, we can also consider
            // the sum of the squares of the remaining elements.
            if (i >= 1) {
                int remainingSum = prefixSum[nums.size()] - prefixSum[i];
                remainingSum -= nums[i] * nums[i];
                sum = max(sum, remainingSum);
            }

            // Update the maximum sum.
            maxSum = max(maxSum, sum);
        }

        // Return the maximum sum modulo 10^9 + 7.
        return maxSum % (1000000007);
    }
};
