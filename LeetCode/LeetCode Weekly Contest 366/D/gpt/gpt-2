#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    int maxSum(vector<int>& nums, int k) {
        priority_queue<int> pq;

        // Push all elements into the max heap
        for (int num : nums) {
            pq.push(num);
        }

        while (k > 0) {
            int max_element = pq.top(); // Get the largest element
            pq.pop(); // Remove it from the heap

            // Perform the given operation on max_element and push it back
            max_element = (max_element & max_element) | max_element;
            pq.push(max_element);

            k--;
        }

        long long sum_of_squares = 0;
        const int MOD = 1000000007;

        // Calculate the sum of squares of the k largest elements
        while (!pq.empty()) {
            int element = pq.top();
            sum_of_squares += (long long)element * element;
            sum_of_squares %= MOD;
            pq.pop();
        }

        return sum_of_squares;
    }
};

int main() {
    vector<int> nums = {2, 6, 5, 8};
    int k = 2;

    Solution solution;
    int result = solution.maxSum(nums, k);

    cout << "Output: " << result << endl;

    return 0;
}
