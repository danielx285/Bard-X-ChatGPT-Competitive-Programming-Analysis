#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef pair<int, int> pii;

struct Slime {
  int size;
  int count;
};

bool operator<(const Slime& a, const Slime& b) {
  return a.size > b.size;
}

int main() {
  int N;
  cin >> N;

  vector<Slime> slimes;
  for (int i = 0; i < N; i++) {
    int size, count;
    cin >> size >> count;
    slimes.push_back({size, count});
  }

  // Sort the slimes by size in decreasing order.
  sort(slimes.begin(), slimes.end());

  // Create a priority queue to store the slimes.
  priority_queue<Slime> pq;
  for (Slime slime : slimes) {
    pq.push(slime);
  }

  // Perform slime synthesis until there are only two slimes left.
  while (pq.size() > 2) {
    // Get the two largest slimes.
    Slime slime1 = pq.top();
    pq.pop();
    Slime slime2 = pq.top();
    pq.pop();

    // Create a new slime of size 2X.
    Slime newSlime = {2 * slime1.size, slime1.count + slime2.count};

    // Add the new slime to the priority queue.
    pq.push(newSlime);
  }

  // The minimum number of slimes is now the size of the priority queue.
  cout << pq.size() << endl;

  return 0;
}
