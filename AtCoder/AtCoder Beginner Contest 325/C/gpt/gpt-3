#include <iostream>
#include <vector>
#include <string>

using namespace std;

int H, W;
vector<string> grid;
vector<vector<bool>> visited;

// Define possible moves to adjacent cells
int dx[] = {1, -1, 0, 0, 1, -1, 1, -1};
int dy[] = {0, 0, 1, -1, 1, -1, -1, 1};

// Function to perform a Depth-First Search to find connected sensors
void dfs(int x, int y) {
    visited[x][y] = true;
    for (int i = 0; i < 8; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (nx >= 0 && nx < H && ny >= 0 && ny < W && !visited[nx][ny] && grid[nx][ny] == '#') {
            dfs(nx, ny);
        }
    }
}

int main() {
    cin >> H >> W;
    grid.resize(H);
    visited.assign(H, vector<bool>(W, false));

    for (int i = 0; i < H; i++) {
        cin >> grid[i];
    }

    int sensorCount = 0;

    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            if (!visited[i][j] && grid[i][j] == '#') {
                dfs(i, j);
                sensorCount++;
            }
        }
    }

    cout << sensorCount << endl;
    return 0;
}
