#include <iostream>
#include <vector>

using namespace std;

int main() {
  int H, W;
  cin >> H >> W;
  vector<string> grid(H);
  for (int i = 0; i < H; i++) {
    cin >> grid[i];
  }

  // Create a visited array to keep track of which squares have already been
  // visited.
  vector<vector<bool>> visited(H, vector<bool>(W, false));

  // Count the number of sensors.
  int sensor_count = 0;

  // Recursively explore the grid, starting from each square that contains a
  // sensor.
  for (int i = 0; i < H; i++) {
    for (int j = 0; j < W; j++) {
      if (grid[i][j] == '#' && !visited[i][j]) {
        sensor_count++;
        explore(grid, visited, i, j);
      }
    }
  }

  // Print the number of sensors.
  cout << sensor_count << endl;

  return 0;
}

// Recursively explore the grid, starting from the given square.
void explore(vector<string>& grid, vector<vector<bool>>& visited, int i, int j) {
  // Mark the current square as visited.
  visited[i][j] = true;

  // Explore the neighboring squares.
  if (i > 0 && !visited[i - 1][j]) {
    explore(grid, visited, i - 1, j);
  }
  if (i < grid.size() - 1 && !visited[i + 1][j]) {
    explore(grid, visited, i + 1, j);
  }
  if (j > 0 && !visited[i][j - 1]) {
    explore(grid, visited, i, j - 1);
  }
  if (j < grid[0].size() - 1 && !visited[i][j + 1]) {
    explore(grid, visited, i, j + 1);
  }
  if (i > 0 && j > 0 && !visited[i - 1][j - 1]) {
    explore(grid, visited, i - 1, j - 1);
  }
  if (i < grid.size() - 1 && j < grid[0].size() - 1 && !visited[i + 1][j + 1]) {
    explore(grid, visited, i + 1, j + 1);
  }
  if (i > 0 && j < grid[0].size() - 1 && !visited[i - 1][j + 1]) {
    explore(grid, visited, i - 1, j + 1);
  }
  if (i < grid.size() - 1 && j > 0 && !visited[i + 1][j - 1]) {
    explore(grid, visited, i + 1, j - 1);
  }
}
