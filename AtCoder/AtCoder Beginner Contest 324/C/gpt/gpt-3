#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int main() {
    int N;
    string T, T_prime;
    cin >> N >> T_prime;
    
    vector<pair<string, int>> strings_with_distance;

    for (int i = 0; i < N; ++i) {
        string S;
        cin >> S;

        int len_diff = S.size() - T_prime.size();
        if (len_diff == 0) {
            int diff_count = 0;
            for (int j = 0; j < T_prime.size(); ++j) {
                if (S[j] != T_prime[j]) {
                    diff_count++;
                }
            }
            if (diff_count == 1) {
                strings_with_distance.push_back({S, i + 1});
            }
        } else if (len_diff == 1) {
            bool match = true;
            for (int j = 0, k = 0; j < T_prime.size(); ++j) {
                if (S[k] != T_prime[j]) {
                    if (k != j) {
                        match = false;
                        break;
                    }
                    k++;
                }
            }
            if (match) {
                strings_with_distance.push_back({S, i + 1});
            }
        } else if (len_diff == -1) {
            bool match = true;
            for (int j = 0, k = 0; j < S.size(); ++j) {
                if (S[j] != T_prime[k]) {
                    if (k != j) {
                        match = false;
                        break;
                    }
                    k++;
                }
            }
            if (match) {
                strings_with_distance.push_back({S, i + 1});
            }
        }
    }

    cout << strings_with_distance.size() << endl;
    for (const auto& entry : strings_with_distance) {
        cout << entry.second << " ";
    }
    cout << endl;

    return 0;
}
